(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{197:function(s,t,n){"use strict";n.r(t);var a=n(0),i=Object(a.a)({},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"常用命令大全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令大全","aria-hidden":"true"}},[s._v("#")]),s._v(" 常用命令大全")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git init # 初始化本地 git 仓库（创建新仓库）\ngit config --global user.name \"xxx\" # 配置用户名\ngit config --global user.email \"xxx@xxx.com\" # 配置邮件\ngit config --global color.ui true # git status 等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit clone git+ssh://git@000.000.00.000/VT.git # clone 远程仓库\ngit status # 查看当前版本状态（是否修改）\ngit add xyz # 添加 xyz 文件至 index\ngit add . # 增加当前子目录下所有更改过的文件至 index\ngit commit -m 'xxx' # 提交\ngit commit --amend -m 'xxx' # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx' # 将 add 和 commit 合为一步\ngit rm xxx # 删除 index 中的文件\ngit rm -r \\* # 递归删除\ngit log # 显示提交日志\ngit log -1 # 显示 1 行日志 -n 为 n 行\ngit log -5\ngit log --stat # 显示提交日志及相关变动文件\ngit log -p -m\ngit log --oneline # 在一行显示 log\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容\ngit show dfb02 # 可以只用 commitid 的前几位\ngit show HEAD # 显示 HEAD 提交日志\ngit show HEAD^ # 显示 HEAD 的父（上一个版本）的提交日志 ^^为上两个版本 ^5 为上 5 个版本\ngit tag # 显示已存在的 tag\ngit tag -a v2.0 -m 'xxx' # 增加 v2.0 的 tag\ngit show v2.0 # 显示 v2.0 的日志及详细内容\ngit log v2.0 # 显示 v2.0 的日志\ngit diff # 显示所有未添加至 index 的变更\ngit diff --cached # 显示所有已添加 index 但还未 commit 的变更\ngit diff HEAD^ # 比较与上一个版本的差异\ngit diff HEAD -- ./lib # 比较与 HEAD 版本 lib 目录的差异\ngit diff origin/master..master # 比较远程分支 master 上有本地分支 master 上没有的\ngit diff origin/master..master --stat # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于 push/pull/fetch）\ngit branch # 显示本地分支\ngit branch --contains 50089 # 显示包含提交 50089 的分支\ngit branch -a # 显示所有分支\ngit branch -r # 显示所有原创分支\ngit branch --merged # 显示所有已合并到当前分支的分支\ngit branch --no-merged # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy # 本地分支改名\ngit checkout -b master_copy # 从当前分支创建新分支 master_copy 并检出\ngit checkout -b master master_copy # 上面的完整版\ngit checkout features/performance # 检出已存在的 features/performance 分支\ngit checkout --track hotfixes/BJVEP933 # 检出远程分支 hotfixes/BJVEP933 并创建本地跟踪分支\ngit checkout v2.0 # 检出版本 v2.0\ngit checkout -b devel origin/develop # 从远程分支 develop 创建新本地分支 devel 并检出\ngit checkout -- README # 检出 head 版本的 README 文件（可用于修改错误回退）\ngit merge origin/master # 合并远程 master 分支至当前分支\ngit cherry-pick ff44785404a8e # 合并提交 ff44785404a8e 的修改\ngit push origin master # 将当前分支 push 到远程 master 分支\ngit push origin :hotfixes/BJVEP933 # 删除远程仓库的 hotfixes/BJVEP933 分支\ngit push --tags # 把所有 tag 推送到远程仓库\ngit fetch # 获取所有远程分支（不更新本地分支，另需 merge）\ngit fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master # 获取远程分支 master 并 merge 到当前分支\ngit mv README README2 # 重命名文件 README 为 README2\ngit reset --hard HEAD # 将当前版本重置为 HEAD（通常用于 merge 失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933 # 删除分支 hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933 # 强制删除分支 hotfixes/BJVEP933\ngit ls-files # 列出 git index 包含的文件\ngit show-branch # 图示当前分支历史\ngit show-branch --all # 图示所有分支历史\ngit whatchanged # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交 dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD # 内部命令：显示某个 git 对象\ngit rev-parse v2.0 # 内部命令：显示某个 ref 对于的 SHA1 HASH\ngit reflog # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday} # 显示 master 分支昨天的状态\ngit log --pretty=format:'%h %s' --graph # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash # 暂存当前修改，将所有至为 HEAD 状态\ngit stash list # 查看所有暂存\ngit stash show -p stash@{0} # 参考第一次暂存\ngit stash apply stash@{0} # 应用第一次暂存\ngit grep \"delete from\" # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gc\ngit fsck\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br")])]),n("h2",{attrs:{id:"git-pull-和本地文件冲突"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-和本地文件冲突","aria-hidden":"true"}},[s._v("#")]),s._v(" Git pull 和本地文件冲突")]),s._v(" "),n("ol",[n("li",[s._v("先将本地修改存储起来")])]),s._v(" "),n("p",[s._v("$ git stash\n这样本地的所有修改就都被暂时存储起来 。是用 git stash list 可以看到保存的信息：")]),s._v(" "),n("p",[s._v("其中 stash@{0}就是刚才保存的标记。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("pull 内容")])]),s._v(" "),n("p",[s._v("暂存了本地修改之后，就可以 pull 了。")]),s._v(" "),n("p",[s._v("$ git pull")]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("还原暂存的内容")])]),s._v(" "),n("p",[s._v("$ git stash pop stash@{0}\n系统提示如下类似的信息：")]),s._v(" "),n("p",[s._v("Auto-merging c/environ.c\nCONFLICT (content): Merge conflict in c/environ.c\n意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。")]),s._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[s._v("解决文件中冲突的的部分")])]),s._v(" "),n("p",[s._v("打开冲突的文件，会看到类似如下的内容：")]),s._v(" "),n("p",[s._v("其中 Updated upstream 和=====之间的内容就是 pull 下来的内容，====和 stashed changes 之间的内容就是本地修改的内容。碰到这种情况，git 也不知道哪行内容是需要的，所以要自行确定需要的内容。")]),s._v(" "),n("p",[s._v("解决完成之后，就可以正常的提交了。")]),s._v(" "),n("h2",{attrs:{id:"git-回退某个文件到指定版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-回退某个文件到指定版本","aria-hidden":"true"}},[s._v("#")]),s._v(" Git 回退某个文件到指定版本")]),s._v(" "),n("p",[s._v("image-20190104195755594")]),s._v(" "),n("p",[s._v("使用 git log data_xiaonuan_mysql.clinic_book1.sh 首先要找到要回滚的版本的 hash 值，上图中 hash 值是")]),s._v(" "),n("p",[s._v("git checkout ea1855040 data_xiaonuan_mysql.clinic_book1.sh 利用 hash 回滚特定文件，注意，这里为了方便操作，使用 hash 的前六位就可以")]),s._v(" "),n("p",[s._v("git commit -m 'fix:回退版本' 回滚后需要提交")])])},[],!1,null,null,null);t.default=i.exports}}]);